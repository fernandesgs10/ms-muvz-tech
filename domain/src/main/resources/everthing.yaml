openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger MUVZ - Everthing
  description: A sample API as an example to Everthing features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://muvz.tech

paths:
  /everything:
    get:
      tags:
        - listEverthing
      summary: Returns a client based on a single name
      description: Returns a client based on a name
      operationId: listEverthing
      parameters:
        - name: q
          in: query
          description: q
          schema:
            type: string
        - name: from
          in: query
          description: from
          schema:
            type: string
        - name: to
          in: query
          description: to
          schema:
            type: string
        - name: domains
          in: query
          description: domains
          schema:
            type: string
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          required: false
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: sortBy
          schema:
            type: array
            items:
              type: string


      responses:
        '200':
          description: client response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/page"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/pageClient"

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

components:
  schemas:
    pageClient:
      allOf:
        - $ref: '#/components/schemas/root'
        - type: object

    root:
      type: object
      properties:
        status:
          type: string
        totalResults:
          type: number
        articles:
          type: array
          items:
            $ref: "#/components/schemas/articles"
        address:
          type: array
          items:
            $ref: "#/components/schemas/source"

    articles:
      type: object
      properties:
        author:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        urlToImage:
          type: string
        publishedAt:
          type: string
        content:
          type: string
        source:
          type: array
          items:
            $ref: "#/components/schemas/source"

    source:
      type: object
      properties:
        id:
          type: number
        name:
          type: string

    genericMessage:
      type: object
      properties:
        message:
          type: string

    notFound:
      type: object
      properties:
        schema:
          $ref: "#/components/schemas/genericMessage"

    generalError:
      type: object
      properties:
        schema:
          $ref: "#/components/schemas/genericMessage"

    sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: number

    pageable:
      type: object
      properties:
        pageNumber:
          type: number
        pageSize:
          type: number
        offset:
          type: number
        paged:
          type: boolean
        unpaged:
          type: boolean
        sort:
          $ref: '#/components/schemas/sort'

    page:
      type: object
      properties:
        totalElements:
          type: number
        totalPages:
          type: number
        last:
          type: boolean
        size:
          type: number
        number:
          type: number
        first:
          type: boolean
        numberOfElements:
          type: number
        empty:
          type: boolean
        content:
          type: array
          items:
            type: object
        pageable:
          $ref: '#/components/schemas/pageable'
        sort:
          $ref: '#/components/schemas/sort'
